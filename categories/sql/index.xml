<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>sql on Professional developer</title><link>https://www.professionaldev.dev/categories/sql/</link><description>Recent content in sql on Professional developer</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Wed, 08 May 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://www.professionaldev.dev/categories/sql/index.xml" rel="self" type="application/rss+xml"/><item><title>Fastest Way To Insert the Data in MS SQL – Part 4 – Turning on the `useBulkCopyForBatchInsert` Parameter</title><link>https://www.professionaldev.dev/post/java/mssqlserver/fast_insert_part4/</link><pubDate>Wed, 08 May 2024 00:00:00 +0000</pubDate><guid>https://www.professionaldev.dev/post/java/mssqlserver/fast_insert_part4/</guid><description>
In previous discussions, we established that bulk insert and multi-value batched inserts represent the fastest methods for inserting data into an MS SQL Server database. However, before concluding this series, let's explore another option.
MS SQL Server has introduced the parameter useBulkCopyForBatchInsert, which automatically activates the bulk API for batched inserts. This functionality operates at the database driver level, enabling it to work seamlessly with both regular parameterized inserts and Hibernate inserts.</description></item><item><title>Fastest Way To Insert the Data in MS SQL – Part 3 – Multi-value insert vs Bulk Api</title><link>https://www.professionaldev.dev/post/java/mssqlserver/fast_insert_part3/</link><pubDate>Sun, 11 Feb 2024 00:00:00 +0000</pubDate><guid>https://www.professionaldev.dev/post/java/mssqlserver/fast_insert_part3/</guid><description>
In a previous post, we concluded that the Bulk API insert is the fastest way to insert data into an MS SQL Server database if the batch size is reasonably large. For Jdbc Template inserts, we created a regular insert statement in the form of insert into table (c1, c2, c3) values (v1, v2, v3), where c1, c2, and c3 are column names, and v1, v2, and v3 are values.</description></item><item><title>Fastest Way To Insert the Data in MS SQL – Part 2 – Hibernate vs Prepared Statement vs Jdbc Template vs Bulk Api</title><link>https://www.professionaldev.dev/post/java/mssqlserver/fast_insert_part2/</link><pubDate>Sat, 21 Oct 2023 00:00:00 +0000</pubDate><guid>https://www.professionaldev.dev/post/java/mssqlserver/fast_insert_part2/</guid><description>
Introduction In the previous post Fastest way to insert the data in MS SQL - Part 1 Hibernate Batching we compared the performance of Hibernate inserts with batching turned off vs batching turned on. In this post, we will explore other ways to insert data into MS SQL server and compare performance with Hibernate.
We will consider four different ways to persist data:
Using Hibernate batching, calling persist method. Manually inserting data using a prepared statement with batching.</description></item><item><title>Fastest way to insert the data in MS SQL - Part 1 Hibernate Batching</title><link>https://www.professionaldev.dev/post/java/mssqlserver/persist_vs_saveall/</link><pubDate>Thu, 05 Oct 2023 00:00:00 +0000</pubDate><guid>https://www.professionaldev.dev/post/java/mssqlserver/persist_vs_saveall/</guid><description>
Introduction Currently, my team is focused on optimizing the performance of our web services. Our data manipulation tasks primarily rely on Hibernate for interacting with our MS SQL Server database. Hibernate provides a convenient and straightforward API for handling data, particularly for persisting individual or interconnected objects (object graph). However, when it comes to bulk operations, Hibernate's default behavior may not be as efficient. To address this, you can enhance performance by enabling Hibernate batching in the application.</description></item></channel></rss>