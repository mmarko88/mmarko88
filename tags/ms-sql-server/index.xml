<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>ms sql server on Professional developer</title><link>https://www.professionaldev.pro/tags/ms-sql-server/</link><description>Recent content in ms sql server on Professional developer</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Sat, 21 Oct 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://www.professionaldev.pro/tags/ms-sql-server/index.xml" rel="self" type="application/rss+xml"/><item><title>Fastest Way To Insert the Data in MS SQL – Part 2 – Hibernate vs Prepared Statement vs Jdbc Template vs Bulk Api</title><link>https://www.professionaldev.pro/post/java/mssqlserver/fast_insert_part2/</link><pubDate>Sat, 21 Oct 2023 00:00:00 +0000</pubDate><guid>https://www.professionaldev.pro/post/java/mssqlserver/fast_insert_part2/</guid><description>
Introduction In the previous post Fastest way to insert the data in MS SQL - Part 1 Hibernate Batching we compared the performance of Hibernate inserts with batching turned off vs batching turned on. In this post, we will explore other ways to insert data into MS SQL server and compare performance with Hibernate.
We will consider four different ways to persist data:
Using Hibernate batching, calling persist method. Manually inserting data using a prepared statement with batching.</description></item><item><title>Fastest way to insert the data in MS SQL - Part 1 Hibernate Batching</title><link>https://www.professionaldev.pro/post/java/mssqlserver/persist_vs_saveall/</link><pubDate>Thu, 05 Oct 2023 00:00:00 +0000</pubDate><guid>https://www.professionaldev.pro/post/java/mssqlserver/persist_vs_saveall/</guid><description>
Introduction Currently, my team is focused on optimizing the performance of our web services. Our data manipulation tasks primarily rely on Hibernate for interacting with our MS SQL Server database. Hibernate provides a convenient and straightforward API for handling data, particularly for persisting individual or interconnected objects (object graph). However, when it comes to bulk operations, Hibernate's default behavior may not be as efficient. To address this, you can enhance performance by enabling Hibernate batching in the application.</description></item></channel></rss>