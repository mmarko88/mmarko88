[{"body":" Currently, I work as Senior Java Developer \u0026amp; Tech Lead at Badin Soft. With more than 8 years of professional experience as a Backend Developer and experience with software development since 2007. Worked with Java Web Services and relational databases on different fintech products. My focus is on helping professional Java developers to optimize their work and solve problems using best practices, new technologies and methodologies by writing clean, secure and performant code in agile environment.\n","link":"https://mmarko88.github.io/mmarko88/about/","section":"","tags":null,"title":"About Me"},{"body":"","link":"https://mmarko88.github.io/mmarko88/","section":"","tags":null,"title":""},{"body":"I have attended the workshop that is organized by the ITKonekt. The workshop was about efficient coding practices for best performance in Java. Java Champion Victor Rentea did a great job explaining all java internals, tools, hibernate, threads, collections, garbage collections, and much more. It was very enjoyable to learn from him, and I decided to ask him the question:\nWhat is the biggest problem that professional Java developers are facing today?\nHis initial answer was: \u0026quot;Not writing enough Java. They write Kubernetes scripts, dev-ops scripts, python scripts…\u0026quot;\nMy understanding of this is that those people are very experienced developers. He also mentioned that this is what his colleagues are working on currently. But if you are just starting your career, he has advice for you:\nIf you are starting a career, then you should learn the language and frameworks that you are using. You should master the language and frameworks. This is the first challenge. Don't be disgusted by the front-end technologies, try to be full stack after you master Java. This is after you are comfortable with Java. Go a bit full stack, not \u0026quot;full full\u0026quot; stack, but \u0026quot;just a bit\u0026quot; full stack. Try to learn more about what surrounds you. Learn some other language. Kotlin is a good one. Learn dev ops. Try to learn a bit of everything. He also gave me this advice:\nAs long as you are surrounded by people smarter than you, you are good. And as long as you love to work with your team, you are good. Doesn't matter project or technology, it can be a terrible legacy system. If you have super cool surroundings, and you keep learning, and you keep having fun, it's perfect.\nIf you liked this post, you can follow me on Twitter, or LinkedIn.\nVictor is a great trainer and one of the best presenters. You can find him at the following links:\nWebsite victorrentea.ro you can find a blog, recorded talks, plus other goodies. Bucharest-software-craftsmanship-community (3000+ developers). Twitter http://www.linkedin.com/in/victor-rentea-trainer[LinkedIn], https://fb.me/VictorRentea.ro[Facebook]. Victor's YouTube Channel - here you can find more recorded and live content, including coding katas, recordings of past meetups, and more. ","link":"https://mmarko88.github.io/mmarko88/post/java/victor_biggest_problem_for_java_devs/","section":"post","tags":null,"title":"I Asked a Java Champion: What Is the Biggest Problem That Professional Java Developers Are Facing Today?"},{"body":"","link":"https://mmarko88.github.io/mmarko88/post/","section":"post","tags":null,"title":"Posts"},{"body":"Based on my previous experience, I created a list of 10 mistakes that developers made, preventing them from being a great developer. Here is the list:\n1. Not writing unit tests Developers that don’t write unit tests produce more bugs from the code they write and maintain. That leads to unstable products and client dissatisfaction.\nIf you are not familiar with writing unit tests, there are some resources to get started with:\nhttps://www.vogella.com/tutorials/Mockito/article.html https://www.baeldung.com/mockito-series https://www.softwaretestinghelp.com/mockito-tutorial/ 2. Not manually testing code Even if you completely cover your code with unit tests, there is still a chance that you missed something out. It happens in practice that some error pushes through.\nIt is always good practice to manually test code before pushing it for code review. By doing this, you will look at your solution from the client’s perspective. And not only that you can detect bugs, but you can also identify design problems in the development stage.\n3. Having the mindset “This will never happen” Developers often make mistakes when they write new code by thinking that certain scenarios in code will never happen. Eventually, it turns out that they are wrong. In those situations, applications can behave unpredictably and it can lead to bugs. Handle every scenario that code can go into.\nDefensive programming techniques will help you in that. If you are not familiar with defensive programming, you can check the following Pluralsight course: https://www.pluralsight.com/courses/defensive-programming-java\n4. Not asking for feedback and not giving feedback To improve yourself, regularly ask for feedback. You can as for feedback when you finish a ticket, or after finishing a project, or when you do a presentation… There is no bad time to ask for feedback.\nGive feedback to your colleagues. And not by telling them they are great even if you think they are not so good. Tell them areas where they can improve themselves. If the feedback is honest, they will appreciate you more.\n5. Not checking the performance of code Often, developers write their code, but they don’t check for performance. When code goes to production, it creates various problems. Poor performance can even crush the server.\n6. Writing long procedural code It is very easy to write long methods with a bunch of logic. By doing this, programmers put the same logic in many places. Projects with a lot of small methods have much greater code reusability and are much easier to maintain.\n7. Not being familiar with the tools Tools are extensions of your hands. The better you know them, the more productive you will be. You should be very familiar with the IDE you use.\nLearn shortcuts, they will make you much more productive. Try learning one shortcut to a day and create your personal cheat sheet.\nResearch plugins, usually you will find a plugin that will help you be even more productive. Plugins that will help you write better code in Intellij Idea are Sonar Lint, Spot bugs, and Code Metrics.\n8. Ignoring problems in code Developers that are working on the most successful products are changing the code all the time. Don’t be afraid to refactor code. If your code is unit tested, then there is a low probability of introducing a regression.\nBut, don’t stop there. Developers often ignore problematic code that is not part of their ticket. As a developer, you are responsible to maintain an application and keep it in good shape. Because of that, fix all problems that you find.\nThe best way to proceed with fixing the problem is to create a ticket and work on it with your team. The following story emphasizes why it is important not to ignore problems in code: https://blog.codinghorror.com/the-broken-window-theory/.\n9. Coding by accident Developers should NEVER do a code modification and push that code in production without understanding the consequences of it. Code can produce correct results for given test values. However, there can be scenarios where it can produce unpredicted results and create serious problems.\nCoding by accident often happens when developers use features from libraries that don’t completely understand. It can also happen when the developer solves the problem without understanding the solution.\n10. Not asking for help Developers are not very communicative people. They like to solve problems by themselves. The era where one developer creates a complete solution from start to end is over.\nDeveloping software is a team activity. When you encounter a problem during programming, try to solve it by yourself. But don’t waste too much time if you can’t figure out the solution. There is a high probability that some of your colleagues already encounter the same problem and know a solution.\nIf it is not the case, then you will get help and the team will understand that the problem is complex and that you need time to solve it. Involving more people will help you resolve complex problems faster. Developers that don’t ask for help, usually spend too much time on a ticket.\nHelp others when you see they have problems with their ticket. As a result, the team will be more productive and people will like you more.\nIf you like this content, you can follow me on Twitter or LinkedIn.\n","link":"https://mmarko88.github.io/mmarko88/post/java/teen_mistakes/","section":"post","tags":null,"title":"10 Mistakes That Java Developers Make That Prevent Them From Being Successful Developers"},{"body":"As a Java developer, I always look for ways to improve my coding skills. I heard about functional programming (FP) back when I was a student. Then, FP was not very popular and most developers considered code written using FP to be slow.\nTime has changed and today FP is very popular. Some developers are considering it to be the future of how developers write code.\nFP is the most useful concept that I learned in the last several years. It helped me to become a better developer. I started writing cleaner code with fewer bugs.\nHere are the immediate benefits I got from FP: I sharpen my skills related to using Java Streams. It is much easier for me to work with Streams when I understand FP concepts. My functions that follow FP concepts are easy to understand and maintain. There is no risk to using them in a concurrent environment. The reusability of those functions is much greater. If you are not a fan of “if” and “for” statements, then you will like FP. It can help you write more understandable code that doesn’t include those statements. I can do more with fewer lines of code. The FP is a declarative paradigm. With FP you describe what you want, rather than how to get it. This means that the code is more readable, reusable, and it is easier to maintain. So, how I started with functional programming? We can find a ton of material on the internet related to FP. I usually like to watch video material when I want to learn about a new subject.\nI attended an online presentation hold by Venkat Subramaniam. It was a great and inspiring presentation. The good news is that you can watch it on the following link: Functional Programming with Java 8.\nAfter that presentation, I gained an interest in FP, so I decided to study more about FP. I watched the Pluralsight course Functional Programming: The Big Picture. This course helped me understand the big picture of FP and why it matters.\nThe next natural step was to check if there is a course that's subject is related to implementing FP concepts in Java. I found the course Applying Functional Programming Techniques in Java. It is a great course. It helped me learn, understand, and apply new FP concepts in Java.\nAfter watching those courses, I wanted to know more about Monads. They are very important in FP. Following two videos helped me understand Monads: Brian Beckman: Don't fear the Monad and What the ƒ is a Monad?.\nLearn from Haskell I started learning Haskell. At the end of Venkat Subramaniam's presentation, I asked him if learning Haskell will help me better understand FP concepts. The answer was something like: “Not only Haskell helped me to understand FP, Haskell LEARNED ME how to write good code”. Some developers say that learning Haskell is like learning programming again from scratch. I learned great stuff from Haskell, and it was easy and fun to get started with it. Learn You a Haskell for Great Good! is a great tutorial to get started with Haskell.\nLearn some FP language If you don’t like Haskell, don’t worry, you can learn another FP language. You can check Kotlin, Scala, F#, Clojure, Elixir, Erlang...\nIf you want to stick with JVM, then you can learn Kotlin, Scala, or Clojure. Kotlin and Scala support functional and OOP paradigms and Java developers can easily get started with them. Kotlin is a new language, Spring framework supports it, and some Java developers started switching to it. Because of those reasons, I suggest trying Kotlin.\nClojure is a modern Lisp variant that runs on JVM. It is useful to know that Lisp is the oldest FP language. Also, Uncle Bob is using Clojure.\nMy experience with Functional Programming To get familiar with FP, I studied and applied in practice FP concepts. The most important concepts that I learned are:\nImmutability - I have as many as possible immutable objects in my codebase. This leads to fewer places where I can change the state of the program. And that leads to fewer bugs. Referential transparency - I write as much as possible pure functions. Those functions are like mathematical functions. For the same input, they always have the same output. Pure and unpure functions - before FP, I was not aware of this concept. Now, I separate pure functions from unpure. It allowed me to easier test the code and improved my code reusability. Function Composition - promotes better code readability and it is easier to write code by composing functions. Curried Functions - brilliant concept, but it is not natural to use it in Java like in other FP languages. I don’t use them for now. Lazy evaluation - evaluate values when they are needed. Lambdas are the way to do a lazy evaluation in Java. Higher-Order functions - receive other functions as parameters in existing functions. Those functions are usually utility functions. Map, filter, reduce pattern - Java Stream API implements this pattern. Monads - helped me understand how to handle unpure functions safely. Optional class - FP provides an efficient solution on how to work with nullable objects. I always return the Optional object instead of null in a method that can return null. Railway programming - helped me understand how Stream API and Optional class works. Using FP in code doesn't prevent us, developers, from writing bad code. We still need to write unit tests, have a good understanding of our task and our codebase. We still need to apply all the best practices that we learned in the past. FP is promoting good practices and makes it easier for us developers to write good and maintainable code.\nI plan to further learn about FP and Java. I will continue to write posts on this subject. For updates, you can follow me on Twitter or LinkedIn.\n","link":"https://mmarko88.github.io/mmarko88/post/java/start_fp_in_java/","section":"post","tags":null,"title":"How do I become proficient with functional programming in Java"},{"body":"","link":"https://mmarko88.github.io/mmarko88/categories/","section":"categories","tags":null,"title":"Categories"},{"body":"","link":"https://mmarko88.github.io/mmarko88/tags/","section":"tags","tags":null,"title":"Tags"}]